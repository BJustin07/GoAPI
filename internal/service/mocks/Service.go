// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	model "GoAPIOnECHO/internal/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: todo
func (_m *Service) CreateTodo(todo *model.Todo) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: id
func (_m *Service) DeleteTodo(id uint) (model.Todo, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodo")
	}

	var r0 model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (model.Todo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) model.Todo); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTodo provides a mock function with given fields:
func (_m *Service) GetAllTodo() ([]model.Todo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTodo")
	}

	var r0 []model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Todo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoById provides a mock function with given fields: id
func (_m *Service) GetTodoById(id uint) (model.Todo, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoById")
	}

	var r0 model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (model.Todo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) model.Todo); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c
func (_m *Service) Login(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: id, updatedTodo
func (_m *Service) UpdateTodo(id uint, updatedTodo model.Todo) (model.Todo, error) {
	ret := _m.Called(id, updatedTodo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, model.Todo) (model.Todo, error)); ok {
		return rf(id, updatedTodo)
	}
	if rf, ok := ret.Get(0).(func(uint, model.Todo) model.Todo); ok {
		r0 = rf(id, updatedTodo)
	} else {
		r0 = ret.Get(0).(model.Todo)
	}

	if rf, ok := ret.Get(1).(func(uint, model.Todo) error); ok {
		r1 = rf(id, updatedTodo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
